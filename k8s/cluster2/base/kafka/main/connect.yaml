apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect
metadata:
  name: my-connect
  annotations:
    # use-connector-resources configures this KafkaConnect
    # to use KafkaConnector resources to avoid
    # needing to call the Connect REST API directly
    strimzi.io/use-connector-resources: "true"
spec:
  version: 3.6.1
  image: harbor.worldl.xpt/library/kafka-connector-plugins:0.39.0-kafka-3.6.1
  replicas: 1
  # https://github.com/strimzi/strimzi-kafka-operator/blob/main/documentation/modules/appendix_crds.adoc#externalconfiguration-schema-properties
  externalConfiguration:
    volumes:
         - name: "self-signed-certificate"
           secret:
             secretName: cluster-truststore-jks
             optional: false
             defaultMode: 0777
             items:
               - key: cluster.truststore.jks
                 mode: 0777
                 # /opt/kafka/external-configuration/self-signed-certificate/cluster.truststore.jks
                 path: cluster.truststore.jks
  bootstrapServers: main-kafka-bootstrap:9093
  tls:
    trustedCertificates:
      - secretName: main-cluster-ca-cert
        certificate: ca.crt
  authentication:
    type: tls
    certificateAndKey:
      secretName: kafka-user-connect
      certificate: user.crt
      key: user.key
  config:
    config.providers: secrets,configmaps
    config.providers.secrets.class: io.strimzi.kafka.KubernetesSecretConfigProvider
    config.providers.configmaps.class: io.strimzi.kafka.KubernetesConfigMapConfigProvider
    group.id: connect-cluster
    offset.storage.topic: connect-cluster-offsets
    config.storage.topic: connect-cluster-configs
    status.storage.topic: connect-cluster-status
    # -1 means it will use the default replication factor configured in the broker
    config.storage.replication.factor: -1
    offset.storage.replication.factor: -1
    status.storage.replication.factor: -1
  template:
    connectContainer:
      # https://github.com/minio/blog-assets/blob/main/kafka/kafka-schema-registry-minio.md?ref=blog.min.io#deploy-kafka-connect
      # https://habr.com/en/articles/744790/: Search AWS_ACCESS_KEY_ID
      # https://developers.redhat.com/blog/2020/02/14/using-secrets-in-apache-kafka-connect-configuration
      env:
        - name: AWS_ACCESS_KEY_ID
          value: "minio"
        - name: AWS_SECRET_ACCESS_KEY
          value: "awesomes3"
        # Self signed certificate(WORK)
        - name: CA_CERTIFICATE_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt